generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USER MANAGEMENT ====================

enum Roles {
  ADMIN
  SELLER
  USER
  SUPPORT
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
}

enum AddressType {
  HOME
  WORK
  OTHER
}

model Users {
  id                       String        @id @default(uuid())
  name                     String
  email                    String        @unique
  phone                    String?       @unique
  password                 String
  roles                    Roles[]
  profilePicture           String?
  dateOfBirth              DateTime?
  gender                   String?
  accountStatus            AccountStatus @default(ACTIVE)
  verified                 Boolean       @default(false)
  verificationCode         String?
  verificationCodeExpireAt DateTime?

  // Balance and loyalty
  walletBalance Float @default(0)

  // Relationships
  sessions       Sessions[]
  addresses      Address[]
  paymentMethods PaymentMethod[]
  products       Products[] // As seller
  cart           CartItem[]
  wishlist       Wishlist[]
  orders         Orders[]
  reviews        Reviews[]
  questions      Questions[]
  answers        Answers[]
  viewedProducts ViewedProduct[]
  sellerProfile  SellerProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Transaction Transaction[]
}

model Address {
  id           String      @id @default(uuid())
  userId       String
  addressType  AddressType @default(HOME)
  fullName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String
  isDefault    Boolean     @default(false)

  // Relationship
  user   Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Orders[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Sessions {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique @db.Text
  ipAddress    String?
  userAgent    String?  @db.Text
  lastActivity DateTime?
  expiresAt    DateTime?

  // Relationship
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([token])
}

enum SellerVerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model SellerProfile {
  id                 String                   @id @default(uuid())
  userId             String                   @unique
  businessName       String
  businessAddress    String
  taxIdentifier      String? // VAT/GST number
  bankAccountInfo    String?
  commissionRate     Float                    @default(10) // Percentage
  verificationStatus SellerVerificationStatus @default(PENDING)
  totalSales         Float                    @default(0)
  rating             Float                    @default(0)

  // Relationship
  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==================== PAYMENT METHODS ====================

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  UPI
}

model PaymentMethod {
  id            String      @id @default(uuid())
  userId        String
  paymentType   PaymentType
  provider      String // Visa, Mastercard, PayPal, etc.
  accountNumber String? // Last 4 digits only
  expiryDate    DateTime?
  isDefault     Boolean     @default(false)

  // Relationship
  user         Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// ==================== PRODUCT MANAGEMENT ====================

model Category {
  id              String  @id @default(uuid())
  name            String
  slug            String  @unique
  description     String?
  imageUrl        String?
  metaTitle       String?
  metaDescription String?
  isActive        Boolean @default(true)
  parentId        String?

  // Self-relation for hierarchical categories
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("SubCategories")

  // Relationships
  products ProductCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
  @@index([slug])
}

model Brand {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String  @unique
  description String?
  logoUrl     String?
  websiteUrl  String?
  isVerified  Boolean @default(false)

  // Relationships
  products Products[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model Products {
  id               String  @id @default(uuid())
  name             String
  slug             String  @unique
  description      String  @db.Text
  shortDescription String?
  regularPrice     Float
  salePrice        Float?
  costPrice        Float?
  sku              String  @unique
  barcode          String?
  weight           Float?
  dimensions       String?
  material         String?
  metaTitle        String?
  metaDescription  String?
  isActive         Boolean @default(true)
  isFeatured       Boolean @default(false)

  // Relations
  sellerId String // Link to user with seller role
  brandId  String?

  // Media
  images ProductImage[]
  videos ProductVideo[]

  // Product Details
  variants       ProductVariant[]
  attributes     ProductAttribute[]
  categories     ProductCategory[]
  inventory      Inventory[]
  specifications ProductSpecification[]

  // Customer interactions
  reviews        Reviews[]
  questions      Questions[]
  cartItems      CartItem[]
  wishlistItems  Wishlist[]
  orderItems     OrderItem[]
  viewedProducts ViewedProduct[]

  // Relationships
  seller Users  @relation(fields: [sellerId], references: [id])
  brand  Brand? @relation(fields: [brandId], references: [id])

  // Discounts & promotions
  discounts ProductDiscount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId])
  @@index([brandId])
  @@index([slug])
  @@index([isActive, isFeatured])
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  url       String
  altText   String?
  position  Int     @default(0)

  // Relationship
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model ProductVideo {
  id           String  @id @default(uuid())
  productId    String
  url          String
  thumbnailUrl String?
  title        String?
  position     Int     @default(0)

  // Relationship
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model ProductVariant {
  id        String  @id @default(uuid())
  productId String
  sku       String  @unique
  name      String
  price     Float
  salePrice Float?
  isActive  Boolean @default(true)
  imageUrl  String?

  // Relationships
  product         Products                @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeValues VariantAttributeValue[]
  inventory       Inventory?
  cartItems       CartItem[]
  orderItems      OrderItem[]
  wishlistItems   Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([sku])
}

model ProductAttribute {
  id        String   @id @default(uuid())
  productId String
  name      String
  values    String[]

  // Relationships
  product       Products                @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantValues VariantAttributeValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model VariantAttributeValue {
  id          String @id @default(uuid())
  variantId   String
  attributeId String
  value       String

  // Relationships
  variant   ProductVariant   @relation(fields: [variantId], references: [id], onDelete: Cascade)
  attribute ProductAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([variantId])
  @@index([attributeId])
}

model ProductCategory {
  id         String @id @default(uuid())
  productId  String
  categoryId String

  // Relationships
  product  Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([categoryId])
}

model ProductSpecification {
  id        String @id @default(uuid())
  productId String
  name      String
  value     String

  // Relationship
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

// ==================== INVENTORY MANAGEMENT ====================

model Warehouse {
  id            String  @id @default(uuid())
  name          String
  location      String
  address       String
  contactPerson String?
  contactPhone  String?
  isActive      Boolean @default(true)

  // Relationships
  inventories Inventory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inventory {
  id                String  @id @default(uuid())
  productId         String
  variantId         String? @unique
  warehouseId       String
  quantity          Int     @default(0)
  reservedQuantity  Int     @default(0) // Reserved for processing orders
  lowStockThreshold Int     @default(5)
  reorderPoint      Int     @default(10)

  // Relationships
  product   Products        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  warehouse Warehouse       @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([warehouseId])
}

// ==================== DISCOUNTS & PROMOTIONS ====================

enum  DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  FREE_SHIPPING
}

model Coupon {
  id              String       @id @default(uuid())
  code            String       @unique
  description     String?
  discountType    DiscountType
  discountValue   Float // Percentage or fixed amount
  minimumSpend    Float?
  maximumDiscount Float?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean      @default(true)
  usageLimit      Int? // Total number of times the coupon can be used
  usedCount       Int          @default(0)
  perUserLimit    Int? // How many times a single user can use this

  // Relationships
  appliedToProducts   Boolean          @default(false) // If true, specific products below; if false, all products
  products            CouponProduct[]
  appliedToCategories Boolean          @default(false) // If true, specific categories below; if false, all categories
  categories          CouponCategory[]
  orders              Orders[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
  @@index([startDate, endDate])
}

model CouponProduct {
  id        String @id @default(uuid())
  couponId  String
  productId String

  // Relationships
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([couponId])
}

model CouponCategory {
  id         String @id @default(uuid())
  couponId   String
  categoryId String

  // Relationships
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([couponId])
}

model ProductDiscount {
  id            String       @id @default(uuid())
  productId     String
  discountType  DiscountType
  discountValue Float
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean      @default(true)

  // Relationship
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([isActive])
  @@index([startDate, endDate])
}

// ==================== SHOPPING EXPERIENCE ====================

model CartItem {
  id            String  @id @default(uuid())
  userId        String
  productId     String
  variantId     String?
  quantity      Int
  savedForLater Boolean @default(false)

  // Relationships
  user    Users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Products        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([variantId])
}

model Wishlist {
  id        String  @id @default(uuid())
  userId    String
  productId String
  variantId String?

  // Relationships
  user    Users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Products        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([variantId])
}

model ViewedProduct {
  id        String @id @default(uuid())
  userId    String
  productId String

  // Relationships
  user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  viewedAt DateTime @default(now())

  @@index([userId])
  @@index([productId])
  @@index([viewedAt])
}

// ==================== ORDER MANAGEMENT ====================

enum OrderStatus {
  PENDING
  PAYMENT_PROCESSING
  PAID
  PREPARING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
  RETURNED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Orders {
  id          String      @id @default(uuid())
  userId      String
  orderNumber String      @unique // User-friendly order identifier
  status      OrderStatus @default(PENDING)
  subTotal    Float // Sum of all items before discounts, shipping, and tax
  discount    Float       @default(0)
  tax         Float       @default(0)
  shippingFee Float       @default(0)
  total       Float
  notes       String?

  // Relations
  couponId          String?
  shippingAddressId String

  // Relationships
  user            Users         @relation(fields: [userId], references: [id])
  shippingAddress Address       @relation(fields: [shippingAddressId], references: [id])
  coupon          Coupon?       @relation(fields: [couponId], references: [id], onDelete: SetNull)
  orderItems      OrderItem[]
  transactions    Transaction[]
  shipment        Shipment?

  // Customer service
  returns ReturnRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  variantId String?
  name      String // Product name at time of order
  sku       String
  price     Float
  quantity  Int
  discount  Float   @default(0)
  tax       Float   @default(0)
  subtotal  Float // price * quantity
  total     Float // subtotal - discount + tax

  // Relationships
  order   Orders          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Products        @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  // Returns and refunds
  returnItems ReturnItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

enum TransactionType {
  PAYMENT
  REFUND
  WALLET_CREDIT
  WALLET_DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Transaction {
  id               String            @id @default(uuid())
  orderId          String?
  userId           String
  paymentMethodId  String?
  transactionType  TransactionType
  amount           Float
  currency         String            @default("INR")
  status           TransactionStatus @default(PENDING)
  gatewayReference String? // Payment gateway reference ID
  gatewayResponse  String?           @db.Text // Detailed response from gateway

  // Relationships
  user          Users          @relation(fields: [userId], references: [id])
  order         Orders?        @relation(fields: [orderId], references: [id], onDelete: SetNull)
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum ShipmentStatus {
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED_ATTEMPT
  EXCEPTION
  RETURNED
}

model Shipment {
  id                String         @id @default(uuid())
  orderId           String         @unique
  carrierName       String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  status            ShipmentStatus @default(PROCESSING)
  shippingLabel     String?

  // Relationship
  order Orders @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([trackingNumber])
  @@index([status])
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  ITEM_RECEIVED
  REFUNDED
  CLOSED
}

model ReturnRequest {
  id         String       @id @default(uuid())
  orderId    String
  reason     String
  status     ReturnStatus @default(REQUESTED)
  adminNotes String?

  // Relationships
  order       Orders       @relation(fields: [orderId], references: [id])
  returnItems ReturnItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([status])
}

model ReturnItem {
  id              String  @id @default(uuid())
  returnRequestId String
  orderItemId     String
  quantity        Int
  reason          String?
  condition       String?
  refundAmount    Float?

  // Relationships
  returnRequest ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)
  orderItem     OrderItem     @relation(fields: [orderItemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([returnRequestId])
  @@index([orderItemId])
}

// ==================== USER ENGAGEMENT ====================

model Reviews {
  id                 String  @id @default(uuid())
  userId             String
  productId          String
  rating             Int // 1-5 stars
  title              String?
  comment            String? @db.Text
  isVerifiedPurchase Boolean @default(false)
  isPublished        Boolean @default(true)

  // Relationships
  user    Users    @relation(fields: [userId], references: [id])
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([rating])
}

model Questions {
  id          String  @id @default(uuid())
  userId      String
  productId   String
  question    String  @db.Text
  isPublished Boolean @default(true)

  // Relationships
  user    Users     @relation(fields: [userId], references: [id])
  product Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  answers Answers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

model Answers {
  id           String  @id @default(uuid())
  questionId   String
  userId       String
  answer       String  @db.Text
  isFromSeller Boolean @default(false)
  isPublished  Boolean @default(true)

  // Relationships
  question Questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     Users     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId])
  @@index([userId])
}
